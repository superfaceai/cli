import { TemplateType } from './common';

/**
 * Returns a map header with filled in `name` with `version`, `provider` and `variant`.
 */
export function header(
  name: string,
  provider: string,
  version: string,
  variant?: string
): string {
  const variantAssignment = variant ? `variant = "${variant}"\n` : '';

  return `profile = "${name}@${version}"
provider = "${provider}"
${variantAssignment}`;
}

/**
 * Returns a map of given template `type` with given `name`.
 */
export function map(type: TemplateType, name: string): string {
  switch (type) {
    case 'empty':
      return empty(name);
    case 'pubs':
      return pubs(name);
  }
}

export function empty(name: string): string {
  return `
"""
${name} map
"""
map ${name} {}
`;
}

export function pubs(name: string): string {
  return `
map ${name} {
  http POST "/api/interpreter" {
    request "application/x-www-form-urlencoded" {
      body {
        data = call BuildQueryFor${name}(city = input.city, nameRegex = input.nameRegex)
      }
    }

    response 200 {
      return map error if (body.remarks && body.remarks.includes('Query timed out')) "TIMEOUT"

      return map result body.elements.map(
        node => {
          return {
            name: node.tags.name,
            openingHours: node.tags.opening_hours
          }
        }
      )
    }
  }
}

// Name is generated to be unique in case of multiple usecases generated by this template
// It is okay to share operations between multiple maps
operation BuildQueryFor${name} {
  regexLine = input.nameRegex ? \`node._["name"~"\${input.nameRegex}", i];\` : '';
  query = (\`[out:json][timeout:10];
    area[boundary=administrative][admin_level=8][name="$\{input.city}"];
    node[amenity="pub"][opening_hours](area);
    \${regexLine}

    out;\`);
  
  return query;
}
`;
}
